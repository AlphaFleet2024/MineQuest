--- wikilinks.py.original	2023-10-08 09:45:54.930463477 +0800
+++ wikilinks.py.patched	2023-10-08 09:47:31.434416133 +0800
@@ -20,10 +20,15 @@
 import xml.etree.ElementTree as etree
 import re
 
+HEADERS = {
+}
 
 def build_url(label, base, end):
     """ Build a url from the label, a base, and an end. """
-    clean_label = re.sub(r'([ ]+_)|(_[ ]+)|([ ]+)', '_', label)
+    base = '../#'
+    if label in HEADERS: base = '../{}/#'.format(HEADERS[label])
+    clean_label = re.sub(r'\s+', '-', label)
+    clean_label = re.sub(r'[^-\w]+', '', clean_label).lower()
     return '{}{}{}'.format(base, clean_label, end)
 
 
@@ -31,8 +36,8 @@
 
     def __init__(self, **kwargs):
         self.config = {
-            'base_url': ['/', 'String to append to beginning or URL.'],
-            'end_url': ['/', 'String to append to end of URL.'],
+            'base_url': ['', 'String to append to beginning or URL.'],
+            'end_url': ['', 'String to append to end of URL.'],
             'html_class': ['wikilink', 'CSS hook. Leave blank for none.'],
             'build_url': [build_url, 'Callable formats URL from label.'],
         }
@@ -43,7 +48,7 @@
         self.md = md
 
         # append to end of inline patterns
-        WIKILINK_RE = r'\[\[([\w0-9_ -]+)\]\]'
+        WIKILINK_RE = r'\[\[ *([^`*]+?) *\]\]'
         wikilinkPattern = WikiLinksInlineProcessor(WIKILINK_RE, self.getConfigs())
         wikilinkPattern.md = md
         md.inlinePatterns.register(wikilinkPattern, 'wikilink', 75)
