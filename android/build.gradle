buildscript {
	repositories {
		mavenCentral()
		jcenter()
		google()
	}
	dependencies {
		classpath "com.android.tools.build:gradle:2.3.0"
		classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.3'
	}
}

def curl_version = "7.58.0"
def gmp_version = "6.1.2"
def irrlicht_revision = "5150"
def openal_version = "1.18.2"
def openssl_version = "1.0.2n"
def sqlite3_version = "3220000"

def APP_PLATFORM = "android-14"
def TARGET_ABI = "armeabi-v7a"
def TARGET_CFLAGS_ADDON = "-mfloat-abi=softfp -mfpu=vfpv3 -O3"
def TARGET_CXXFLAGS_ADDON = "-mfloat-abi=softfp -mfpu=vfpv3 -O3"
def COMPILER_VERSION = "clang"
def ANDROID_NDK = "/home/nerzhul/Devel/Android/android-sdk/ndk-bundle/"

apply plugin: "com.android.application"

android {
	compileSdkVersion 26
	buildToolsVersion "26.0.3"

	defaultConfig {
		versionCode 19
		versionName "${System.env.VERSION_STR}.${versionCode}"
		minSdkVersion 14
		targetSdkVersion 14
		applicationId "net.minetest.minetest"
		manifestPlaceholders = [ package: "net.minetest.minetest", project: project.name ]
		ndk {
			// Specifies the ABI configurations of your native
			// libraries Gradle should build and package with your APK.
			abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
		}

		externalNativeBuild {
			cmake {
				arguments "-DANDROID_STL=c++_shared"
				cppFlags "-frtti -fexceptions"
			}
		}
	}

	externalNativeBuild {
		cmake {
			path 'CMakeLists.txt'
		}
	}


	lintOptions {
		disable "OldTargetApi", "GoogleAppIndexingWarning"
	}

	Properties props = new Properties()
	props.load(new FileInputStream(file("local.properties")))

	if (props.getProperty("keystore") != null) {
		signingConfigs {
			release {
				storeFile file(props["keystore"])
				storePassword props["keystore.password"]
				keyAlias props["key"]
				keyPassword props["key.password"]
			}
		}

		buildTypes {
			release {
				signingConfig signingConfigs.release
			}
		}
	}
}

task cloneIrrlicht(type: Exec) {
	workingDir 'deps'
	commandLine 'svn', 'co', 'https://svn.code.sf.net/p/irrlicht/code/branches/ogl-es@' + irrlicht_revision, 'irrlicht'
} << {
	exec {
		workingDir 'deps/irrlicht'
		commandLine 'patch', '--binary', '-p1', '-N', '-i', '../../patches/irrlicht-touchcount.patch'
	}

	exec {
		workingDir 'deps/irrlicht'
		commandLine 'patch', '--binary', '-p1', '-N', '-i', '../../patches/irrlicht-back_button.patch'
	}

	exec {
		workingDir 'deps/irrlicht'
		commandLine 'patch', '--binary', '-p1', '-N', '-i', '../../patches/irrlicht-texturehack.patch'
	}

	exec {
		workingDir 'deps/irrlicht'
		commandLine 'patch', '--binary', '-p1', '-N', '-i', '../../patches/irrlicht-native_activity.patch'
	}
}

task buildIrrlicht(type: Exec, dependsOn:[cloneIrrlicht]) {
	workingDir 'deps/irrlicht/source/Irrlicht/Android'
	# @TODO use the correct options
	commandLine ANDROID_NDK + '/ndk-build', 'NDK_APPLICATION_MK=../../../../../jni/Deps.mk'
}

task cloneOpenAL(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
  dir = file("deps/openal-soft")
  uri = 'https://github.com/kcat/openal-soft'
  treeish = 'openal-soft-' + openal_version
} << {
	exec {
		workingDir 'deps'
		commandLine 'patch', '-p0', '-i', '../patches/openal_align.patch'
	}

	exec { 
		workingDir 'deps'
		commandLine 'patch', '-p0', '-i', '../patches/openal_math_defs.h.patch'
	}
}

task buildOpenAL(type: Exec, dependsOn:[cloneOpenAL]) {
	workingDir 'deps/openal-soft'
	# @TODO use the correct options
	commandLine ANDROID_NDK + '/ndk-build', 'NDK_APPLICATION_MK=../../jni/Deps.mk'
}

task cleanAssets(type:Delete) {
	delete 'src/main/assets'
}

task cleanIconv(type:Delete) {
	delete 'deps/libiconv'
}

task cleanIrrlicht(type:Delete) {
	delete 'deps/irrlicht'
}

task cleanLevelDB(type:Delete) {
	delete 'deps/leveldb'
}

task cleanCURL(type:Delete) {
	delete 'deps/curl'
	delete 'deps/curl-' + curl_version
}

task cleanOpenSSL(type:Delete) {
	delete 'deps/openssl'
	delete 'deps/openssl-' + openssl_version
	delete 'deps/openssl-' + openssl_version + '.tar.gz'
}

task cleanOpenAL(type:Delete) {
	delete 'deps/openal-soft'
}

task cleanFreetype(type:Delete) {
	delete 'deps/freetype2-android'
}

task cleanOgg(type:Delete) {
	delete 'deps/libvorbis-libogg-android'
}

task cleanSQLite3(type:Delete) {
	delete 'deps/sqlite-amalgamation-' + sqlite3_version
	delete 'deps/sqlite-amalgamation-' + sqlite3_version + '.zip'
}

task cleanGMP(type:Delete) {
	delete 'deps/gmp'
	delete 'deps/gmp-' + gmp_version
}

task cleanAll(type:Delete, dependsOn:[clean,cleanAssets,cleanIconv,cleanFreetype,cleanIrrlicht,cleanLevelDB,cleanSQLite3,cleanCURL,cleanOpenSSL,cleanOpenAL,cleanOgg,cleanGMP]) {
	delete 'deps'
}
