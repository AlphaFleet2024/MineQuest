buildscript {
	repositories {
		mavenCentral()
		jcenter()
		google()
	}
	dependencies {
		classpath "com.android.tools.build:gradle:2.3.0"
	}
}

apply plugin: "com.android.application"

android {
	compileSdkVersion 26
	buildToolsVersion "26.0.3"

	defaultConfig {
		versionCode 19
		versionName "${System.env.VERSION_STR}.${versionCode}"
		minSdkVersion 14
		targetSdkVersion 14
		applicationId "net.minetest.minetest"
		manifestPlaceholders = [ package: "net.minetest.minetest", project: project.name ]
		ndk {
			// Specifies the ABI configurations of your native
			// libraries Gradle should build and package with your APK.
			abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
		}

		externalNativeBuild {
			cmake {
				arguments "-DANDROID_STL=c++_shared"
				cppFlags "-frtti -fexceptions"
			}
		}
	}

	externalNativeBuild {
		cmake {
			path 'CMakeLists.txt'
		}
	}


	lintOptions {
		disable "OldTargetApi", "GoogleAppIndexingWarning"
	}

	Properties props = new Properties()
	props.load(new FileInputStream(file("local.properties")))

	if (props.getProperty("keystore") != null) {
		signingConfigs {
			release {
				storeFile file(props["keystore"])
				storePassword props["keystore.password"]
				keyAlias props["key"]
				keyPassword props["key.password"]
			}
		}

		buildTypes {
			release {
				signingConfig signingConfigs.release
			}
		}
	}
}

task cleanAssets(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_assets'
}

task cleanIconv(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_iconv'
}

task cleanIrrlicht(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_irrlicht'
}

task cleanLevelDB(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_leveldb'
}

task cleanCURL(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_curl'
}

task cleanOpenSSL(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_openssl'
}

task cleanOpenAL(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_openal'
}

task cleanOgg(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_ogg'
}

task cleanGMP(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_gmp'
}

task cleanApk(type:Exec) {
	workingDir '.'
	executable 'make'
	args 'clean_apk'
}

task cleanAll(type:Exec, dependsOn:[cleanApk,cleanAssets,cleanIconv,cleanIrrlicht,cleanLevelDB,cleanCURL,cleanOpenSSL,cleanOpenAL,cleanOgg,cleanGMP]) {
	workingDir '.'
	executable 'echo'
	args '"Dependencies cleared."'
}
